/********************************************************************
** Copyright(c) 2015 ,哈尔滨工程大学信息安全研究中心
** All rights reserved
**
** 文件名：http_hash
** 创建人：gan
** 描  述：http哈希表
** 
** 当前版本：1.0
** 作    者：赵恒
** 完成日期：2015-12-02
** 取代版本：1.x
** 完成日期：*********
** ********************************************************************/
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include "http.h"


void httphash_init()
{
  int i = 0;
  for(i = 0;i< MAX_SIZE; i++)
  {
    httphashtable[i] = NULL; 
  }
}
/*********************************************************************************************************
 *  Function Name: hash_map
 *  Purpose      : 哈希算法                 
 *  Parameter    : 四元组
 *********************************************************************************************************/
unsigned int  hash_map( unsigned int saddr, unsigned short sport, unsigned int daddr, unsigned short dport)
{
  unsigned int  key;
  key = (saddr ^ sport) ^ (daddr ^ dport);
  key ^= key >> 16;
  key = key >> 16;
  key = key & (2 ^ 16 - 1);
  return key;
}
/*unsigned int hash_map(int key)
{
 return key%5;90<F9>```````````````````` 
}
*/
/*********************************************************************************************************
 *  Function Name: tuplecmp
 *  Purpose      : 判断四元组是否相等                 
 *  Parameter    : 四元组
 *********************************************************************************************************/
int  tuplecmp(struct tuple4 a, struct tuple4 b)
{
  if(a.saddr == b.saddr && a.source == b.source && a.daddr ==b.daddr && a.dest == b.dest)
    return 1;
  else
   return 0;
}

/*********************************************************************************************************
 *  Function Name: httphashtable_insert
 *  Purpose      : 往http哈希表中插入节点                  
 *  Parameter    : 
 *********************************************************************************************************/
//void hashtable_insert(struct tuple4 ip_and_port, char *s,char *data)
void httphashtable_insert(struct tuple4 ip_and_port, char* contype, int *cont_encoding, int* tran_encoding, z_stream *strm, int next_cklen)
{
  unsigned int pos;
  unsigned int saddr = ip_and_port.saddr;
  unsigned short sport = ip_and_port.source;
  unsigned int daddr = ip_and_port.daddr;
  unsigned short dport = ip_and_port.dest;
  pos = hash_map(saddr,sport,daddr,dport);
  httplist *phead = httphashtable[pos];
  httplist * front = NULL;
  while(phead)
  {
    if(tuplecmp(ip_and_port,phead->tup4))
    {
	  //phead ->cont_type = (char*)malloc(6*sizeof(char));  
	  strcpy(phead->cont_type, contype); //已经有了就不用分配空间直接进行复制
	  phead ->tran_encoding = *tran_encoding;
	  phead ->cont_encoding = *cont_encoding;
	  phead ->next_cklen = next_cklen;
	 // inflateEnd(&(phead ->strm));// 有新包就讲旧zstream释放
	  if (strm)
	  {
		phead ->strm = *strm; //传进来的是指针 mark
		free(strm);
	  } //如果指针为空，不对此成员进行赋值，指针为空时，后面数据包处理时不取此值，不知是否能避免错误
      return;
    }
    front = phead;
    phead = phead->next;
  }
  httplist * pnewnode = (httplist *)malloc(sizeof(httplist));

  pnewnode ->cont_type = (char*)malloc(6*sizeof(char));  
  strcpy(pnewnode->cont_type, contype);
  pnewnode ->tran_encoding = *tran_encoding;
  pnewnode ->cont_encoding = *cont_encoding;
  pnewnode ->next_cklen = next_cklen;
  pnewnode ->tup4 = ip_and_port;
  if (strm)
  {
	pnewnode ->strm = *strm; //传进来的是指针 mark
	free(strm);  //赋值完即释放指针指向的空间
  }
  if(front != NULL)
  {
    pnewnode ->next = front ->next;
    front->next =pnewnode;
	printf("inserted\n");
  }
  else 
  {
    pnewnode->next = NULL;
    httphashtable[pos] = pnewnode;
	printf("new position inserted\n");
  }
}   
/********************************************************************************************************
 *  Function Name: hashtable_print
 *  Purpose      : 打印哈希表               
 *  Parameter    : 无*********************************************************************************************************/

//void hashtable_print(int n)
//{
//  printf("========================content of hash table=============\n");
//  int i;
//  for(i =n ; i< MAX_SIZE; i++)
//  {
//    if(hashtable[i])
//    {
//      list *phead = hashtable[i];
//      printf("%d =>",i);
//      printf(" data is");
//      while(phead)
//      {
//        printf("name is %s\n",phead->name);
//        tcp *p= phead->tcp_list;
//        while(p)
//        {
//         
//         printf(" %s",p->data_stream);
//         p =p->next;
//        }
//        printf("\n");
//        phead = phead ->next;
//      }
//    }
//  }
//}
/********************************************************************************************************
 *  Function Name: get_info_from_hash
 *  Purpose      : 查找节点              
 *  Parameter    : *********************************************************************************************************/

int get_info_from_hash(struct tuple4 ip_and_port, char *contype, int *cont_encoding, int *tran_encoding, z_stream *strm, int *next_cklen)
{

  unsigned int pos;
  unsigned int saddr = ip_and_port.saddr;
  unsigned short sport = ip_and_port.source;
  unsigned int daddr = ip_and_port.daddr;
  unsigned short dport = ip_and_port.dest;
  pos = hash_map(saddr,sport,daddr,dport);
  httplist *phead = httphashtable[pos];
  while(phead)
  {
    if(tuplecmp(ip_and_port,phead->tup4))
    {
      printf("Find node!!!\n");
	  //contype = phead->cont_type;  
	  strcpy(contype,phead->cont_type);
	  *cont_encoding = phead->cont_encoding;
	  *tran_encoding = phead->tran_encoding;
	  *next_cklen    = phead->next_cklen;
	  if (*cont_encoding == 0)  //从结构体中取值时如果 cont_encoding为0(非gzip)则不需要取strm这个字段，赋值为null
	  {
		free(strm);
		strm = NULL;
	  }
	  else
	  {
		*strm = phead->strm; //将指针直接指向这边哈希表中的strm成员地址
	  }
      return 1;
    }
    phead = phead->next;
  }
  printf("Can't find node!!!\n");
  return 0;
}
//将剩余的chunk长度插入

int insert_chunklen(struct tuple4 ip_and_port, int next_cklen)
{
  unsigned int pos;
  unsigned int saddr = ip_and_port.saddr;
  unsigned short sport = ip_and_port.source;
  unsigned int daddr = ip_and_port.daddr;
  unsigned short dport = ip_and_port.dest;
  pos = hash_map(saddr,sport,daddr,dport);
  httplist *phead = httphashtable[pos];
  while(phead)
  {
    if(tuplecmp(ip_and_port,phead->tup4))
    {
      printf("Find node!!!\n");
	  phead ->next_cklen = next_cklen;
      return 1;
    }
    phead = phead->next;
  }
  printf("Can't find node!!!\n");
  return 0;
}
/********************************************************************************************************
 *  Function Name: httphash_delete
 *  Purpose      : 删除http哈希表的节点           
 *  Parameter    ：key哈希关键字 *********************************************************************************************************/

int httphash_delete(struct tuple4 ip_and_port)
{
  unsigned int pos; 
  unsigned int saddr = ip_and_port.saddr;
  unsigned short sport = ip_and_port.source;
  unsigned int daddr = ip_and_port.daddr;
  unsigned short dport = ip_and_port.dest;
  pos = hash_map(saddr,sport,daddr,dport);
  httplist *phead = httphashtable[pos];
  httplist * front = NULL;
  while(phead)
  {
    if(tuplecmp(ip_and_port,phead->tup4))
    {
		printf("delete node");
		if(front)
		{
			front ->next = phead->next;
			free(phead);
			return 1;
		}
		else
		{
			httphashtable[pos] = NULL;
			free(phead);
			return 1;
		}
    }
    front = phead;
    phead = phead->next;
  }
  printf("can't find node");
  return 0;
}   
/********************************************************************************************************
 *  Function Name: hash_realase
 *  Purpose      : 销毁哈希表
 *  Parameter    ：无 *********************************************************************************************************/
//int hash_realase()
//{
//  int i;
//  for(i = 0;i<MAX_SIZE;i++)
//  {
//    if(hashtable[i])
//    {
//      list * phead = hashtable[i];
//      free(phead);
//	}    
//  }
//  return 0;
//}

